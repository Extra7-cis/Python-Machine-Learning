{"cells":[{"cell_type":"markdown","source":["#imports"],"metadata":{"id":"7XBbeBhR-A_L"}},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","#just to make the plots appear automaticlly\n","#without having to do plt.show\n","%matplotlib inline\n","import keras\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout\n","from sklearn.metrics import confusion_matrix\n","import seaborn as sns\n","from IPython.core.pylabtools import figsize\n","#have constant results every time they dont change \n","#because of the  randomness\n","np.random.seed(0)"],"metadata":{"id":"gWjIFSlI8Vgr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Data"],"metadata":{"id":"ZOd71mRc-EHJ"}},{"cell_type":"code","source":["\n","from keras.datasets import mnist\n","#to load and Download tha Data from keras\n","(x_train, y_train),(x_test, y_test) = mnist.load_data()\n","#x_train = x_train.astype('float32') / 255\n","#x_test = x_test.astype('float32') / 255"],"metadata":{"id":"2xCbFRtW8Y4h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#we print the data here to know how much data we have\n","'''we have 60K images of 28*28 pixel and \n","60K labels(the label is just a number \n","so that why we dont have any second Dimentions)'''\n","print(x_train.shape, y_train.shape)\n","'''and we have 10K images for the test\n","and 10K labels for the test'''\n","print(x_test.shape, y_test.shape)"],"metadata":{"id":"NqkpXyIv8dbq","executionInfo":{"status":"ok","timestamp":1650795974349,"user_tz":-180,"elapsed":7,"user":{"displayName":"Waleed Zaghloul","userId":"01299016220189512847"}},"outputId":"00a7e3b8-133e-4b0f-e32a-bd85e11879ca","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(60000, 28, 28) (60000,)\n","(10000, 28, 28) (10000,)\n"]}]},{"cell_type":"markdown","source":["#Visualize Examples"],"metadata":{"id":"h8LQXc-R_x2m"}},{"cell_type":"code","source":["#we need to use loop so we can visualize one of each number\n","num_classes = 10\n","#for figur and axis the number 1 is refered to one row\n","f, ax = plt.subplots(1, num_classes)\n","#image size\n","f = plt.figure(figsize(5,1))\n","for i in range(0, num_classes):\n","  sample = x_train[y_train == i][0]\n","  #use gray scale\n","  ax[i].imshow(sample, cmap='gray')\n","  #to put label on the image\n","  ax[i].set_title(\"Label: {}\".format(i), fontsize=15)"],"metadata":{"id":"SR6X8Oxg-0Bl","executionInfo":{"status":"ok","timestamp":1650796008341,"user_tz":-180,"elapsed":2478,"user":{"displayName":"Waleed Zaghloul","userId":"01299016220189512847"}},"outputId":"dfe6847a-9394-41c2-adc9-87832079e5a9","colab":{"base_uri":"https://localhost:8080/","height":137}},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x72 with 10 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 360x72 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["for i in range(10):\n","  print(y_train[i])"],"metadata":{"id":"JQg6mzQZEpDM","executionInfo":{"status":"ok","timestamp":1650795888615,"user_tz":-180,"elapsed":294,"user":{"displayName":"Waleed Zaghloul","userId":"01299016220189512847"}},"outputId":"2bbc0224-c7ba-4828-a60b-bcfa0ee1ce1e","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n","0\n","4\n","1\n","9\n","2\n","1\n","3\n","1\n","4\n"]}]},{"cell_type":"code","source":["'''we cant feed our network with these numbers above because these values are continous \n","and we want to do classifications so we want to make which one of those values as a class '''\n","#\n","y_train = keras.utils.np_utils.to_categorical(y_train, num_classes)\n","y_test = keras.utils.np_utils.to_categorical(y_test, num_classes)"],"metadata":{"id":"IEcC9IFqGlNi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["'''what happend here that we create a vector for each numbers which is as long as the number of numbers we\n","have which is 10 so we have a vector of size 10 and then we fill the victor with zeros except for the index\n","where our number is so for the number 5 we are going to have a one at the fifth index of the vector which will\n","represent our number , and this way our network can learn to predict that one exact value for the class and we will\n","basically getting at the end a probability of that image being some certain number\n","'''\n","for i in range(10):\n","  print(y_train[i])"],"metadata":{"id":"w0MkDUJsHunM","executionInfo":{"status":"ok","timestamp":1650795893143,"user_tz":-180,"elapsed":545,"user":{"displayName":"Waleed Zaghloul","userId":"01299016220189512847"}},"outputId":"5d654617-233a-4dcb-bcef-42f39ea69dbf","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n","[1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n","[0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n","[0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n","[0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n","[0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]\n","[0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n","[0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n","[0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n","[0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n"]}]},{"cell_type":"markdown","source":["#prepare Data\n"],"metadata":{"id":"josc-ZhqKD3x"}},{"cell_type":"code","source":["#when we prepare the Data before we fit them to the model we normalizing our Data\n","'''we have to keep the Data in a certain range otherwise the network has a much harder \n","time doing the training and learning the correct weights thats why we always normalize our Data before we fit them to the network'''\n","\n","#because we have data which are RGB images and the values range from 0 which is black to the value 255 which is white we just want \n","#to divide by that value 255 and then we will have everything in the range from 0 to 1\n","### Normalize Data\n","x_train  = x_train / 255.0\n","x_test = x_test / 255.0\n","###Reshape our Data \n","#becaus our shape is (28,28) but we dont want to pass this matrix as our input \n","#what we are going to do is flatten it into one long vector and pass that vector to the neural network\n","#to fit a lot of data at the same time so instead of (28,28) we will do this :\n","#we put the shape as 0 becaus we want to keep the same number of images before \n","# -1 will basically make this (28,28) into (28,28) in one diminsion \n","x_train = x_train.reshape(x_train.shape[0], -1) \n","x_test = x_test.reshape(x_test.shape[0], -1) \n","print(x_train.shape)\n","#now we say that we have 60K images like before but this time it is like 784 on the second dimension not 28\n","#so this is the one vector that we are going to be passing every time for the image"],"metadata":{"id":"0apkBFQqIJVI","executionInfo":{"status":"ok","timestamp":1650795896524,"user_tz":-180,"elapsed":500,"user":{"displayName":"Waleed Zaghloul","userId":"01299016220189512847"}},"outputId":"ce9bd37d-d94e-45c1-854c-a176bea08792","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(60000, 784)\n"]}]},{"cell_type":"markdown","source":["#Create Model - Fully Connected Neural Network"],"metadata":{"id":"weRYL-m2OVb0"}},{"cell_type":"code","source":["\n","#Sequential model is in keras is basically a model where we cap keep adding layer after layer and create chain of laiers\n","#it is one of the easiest ways to create a deep neural network in keras \n","model = Sequential()\n","#here we are going to specify the dimensions and the layers we will use:\n","#(784,) it is our image when we flatten it\n","#activation is a function we add after layer to be able to solve nonlinear equations \n","#and the relu is a piecewise linear function that will output the input directly if it is positive, otherwise, it will output zero\n","model.add(Dense(units=128, input_shape=(784,), activation='relu', name='input'))\n","#no need to spicify the input shape here because it is automatic\n","model.add(Dense(units=128, activation='relu', name='hidden1'))\n","#this means that 25% of our neurons are going to be deactivated during the training\n","#which help prevent overfitting from the network \n","model.add(Dropout(0.25, name='deactive'))\n","#this time the units will be 10 because we are going to output to 10 defferint neurons which is going to be \n","#our classifier basically becaus we have 10 different degets and the activation will be softmax\n","#which basically assign a probability for each class to be correct \n","model.add(Dense(units=10, activation = 'softmax', name='output'))\n","#we are going to use categorical_crossentropy as our loss which is basically a loss we use often when we have to deal \n","#multiple classes , the optimizer is adam which is pretty much go to optimizer when you are making neural networks\n","#and we are just going to use the accuracy as our metric\n","model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","#to see the summary of the model\n","model.summary()\n","#so like we see we have around 118K parameters "],"metadata":{"id":"QBoe74aONnFM","executionInfo":{"status":"ok","timestamp":1650795900958,"user_tz":-180,"elapsed":1101,"user":{"displayName":"Waleed Zaghloul","userId":"01299016220189512847"}},"outputId":"721f7569-8b63-48d6-e939-b79d3c65eed5","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input (Dense)               (None, 128)               100480    \n","                                                                 \n"," hidden1 (Dense)             (None, 128)               16512     \n","                                                                 \n"," deactive (Dropout)          (None, 128)               0         \n","                                                                 \n"," output (Dense)              (None, 10)                1290      \n","                                                                 \n","=================================================================\n","Total params: 118,282\n","Trainable params: 118,282\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","source":["Train"],"metadata":{"id":"o5FfddY7VX25"}},{"cell_type":"code","source":["#this means we are going to import 512 images in the network at a single time\n","batch_size = 512\n","#indicates the number of passes of the entire training dataset the machine learning algorithm has completed\n","epochs = 10\n","#start the training of the data\n","model.fit(x=x_train, y=y_train, batch_size=batch_size, epochs=epochs)\n","#we have here the accuracy and the loss of the training data"],"metadata":{"id":"NmVo67R0U7QU","executionInfo":{"status":"ok","timestamp":1650795921080,"user_tz":-180,"elapsed":12187,"user":{"displayName":"Waleed Zaghloul","userId":"01299016220189512847"}},"outputId":"8b9e86fb-e8b2-441e-ee4f-bd1e34ee9c31","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","118/118 [==============================] - 2s 9ms/step - loss: 0.6059 - accuracy: 0.8238\n","Epoch 2/10\n","118/118 [==============================] - 1s 9ms/step - loss: 0.2286 - accuracy: 0.9346\n","Epoch 3/10\n","118/118 [==============================] - 1s 9ms/step - loss: 0.1666 - accuracy: 0.9514\n","Epoch 4/10\n","118/118 [==============================] - 1s 9ms/step - loss: 0.1343 - accuracy: 0.9603\n","Epoch 5/10\n","118/118 [==============================] - 1s 9ms/step - loss: 0.1114 - accuracy: 0.9670\n","Epoch 6/10\n","118/118 [==============================] - 1s 9ms/step - loss: 0.0948 - accuracy: 0.9713\n","Epoch 7/10\n","118/118 [==============================] - 1s 9ms/step - loss: 0.0802 - accuracy: 0.9758\n","Epoch 8/10\n","118/118 [==============================] - 1s 9ms/step - loss: 0.0718 - accuracy: 0.9782\n","Epoch 9/10\n","118/118 [==============================] - 1s 9ms/step - loss: 0.0626 - accuracy: 0.9809\n","Epoch 10/10\n","118/118 [==============================] - 2s 14ms/step - loss: 0.0571 - accuracy: 0.9826\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7ff38d4d0690>"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["#Evaluate\n"],"metadata":{"id":"fhCwZbUWWcEK"}},{"cell_type":"code","source":["#we have to chick who does the perform on the validation server test set which hasnt been used in the training\n","#this is the data that the network hasnt seen before\n","test_loss, test_accuracy = model.evaluate(x_test,y_test)\n","print(\"Test Loss: {}, Test Accuracy: {}\".format(test_loss, test_accuracy))"],"metadata":{"id":"IqQxtcPXWFd-","executionInfo":{"status":"ok","timestamp":1650795933288,"user_tz":-180,"elapsed":1959,"user":{"displayName":"Waleed Zaghloul","userId":"01299016220189512847"}},"outputId":"acb3bff8-fa40-4911-9be3-01cc77a36970","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 1s 2ms/step - loss: 0.0803 - accuracy: 0.9750\n","Test Loss: 0.0803479254245758, Test Accuracy: 0.9750000238418579\n"]}]},{"cell_type":"code","source":["#use the model to predict a classification on some input image\n","#this give us an array with all the predictions from our test data \n","y_pred = model.predict(x_test)\n","#in the first variable what we get is basically probability for every element to be\n","#from a single class so you can see those very small probabilities \n","#and what we do with the argmax command is we go to every row and bick the highest probability\n","#and return that index so we get the index which pretty much the number of the classification \n","y_pred_classes = np.argmax(y_pred, axis = 1)\n","print(y_pred)\n","print(y_pred_classes)"],"metadata":{"id":"wJby1O4sXWTW","executionInfo":{"status":"ok","timestamp":1650795936137,"user_tz":-180,"elapsed":1110,"user":{"displayName":"Waleed Zaghloul","userId":"01299016220189512847"}},"outputId":"1533305e-cf44-430b-f2f1-d5dcc62e4131","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[2.4348954e-06 2.1878591e-06 4.4744131e-05 ... 9.9982256e-01\n","  1.8134944e-06 1.7878743e-05]\n"," [1.1718770e-07 1.7275565e-04 9.9971014e-01 ... 5.5656699e-08\n","  9.0644817e-06 1.5372920e-09]\n"," [2.4314106e-05 9.9685079e-01 4.8012473e-04 ... 8.3108572e-04\n","  1.0661251e-03 1.0284985e-05]\n"," ...\n"," [1.0914310e-10 1.5587743e-08 2.1807614e-10 ... 1.9037283e-07\n","  1.2786721e-07 1.4076734e-05]\n"," [5.9178518e-10 7.4026627e-12 6.1737243e-12 ... 5.8848604e-10\n","  3.0484972e-07 5.8665262e-10]\n"," [2.9163045e-09 7.6369112e-11 5.7139082e-10 ... 3.9484019e-13\n","  7.1644988e-09 8.4061640e-11]]\n","[7 2 1 ... 4 5 6]\n"]}]},{"cell_type":"code","source":["#get the random element for my test data and make a prediction and see if that is accurate \n","\n","#Example\n","random_idx = np.random.choice(len(x_test))\n","x_sample = x_test[random_idx]\n","#get all the predictions\n","#we get the actual numbers not the probability vectors\n","y_true = np.argmax(y_test, axis=1)\n","y_sample_true = y_true[random_idx]\n","y_sample_pred_class = y_pred_classes[random_idx]\n","f = plt.figure(figsize(3,3))\n","#now lets drow the image and plot the label to see what is happining\n","\n","plt.title(\"Predicted: {}, True: {}\".format(y_sample_pred_class, y_sample_true), fontsize= 16)\n","plt.imshow(x_sample.reshape(28,28), cmap='gray')"],"metadata":{"id":"_CuzY2dUZ4hD","executionInfo":{"status":"ok","timestamp":1650795941405,"user_tz":-180,"elapsed":634,"user":{"displayName":"Waleed Zaghloul","userId":"01299016220189512847"}},"outputId":"55e2d621-6ca9-494e-dbd4-89e7963b27ef","colab":{"base_uri":"https://localhost:8080/","height":246}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7ff388d90150>"]},"metadata":{},"execution_count":13},{"output_type":"display_data","data":{"text/plain":["<Figure size 216x216 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#Confusion Matrix"],"metadata":{"id":"FE3-IGond_A6"}},{"cell_type":"code","source":["#we dont know if our network is predicting one class better than the others so what we usually\n","#plot is these preblems is a confusion matrix which basically shows you how accurate your network\n","#is for every class \n","\n","confusion_mtx = confusion_matrix(y_true, y_pred_classes)\n","\n","#plot the matrix above using some libraries we imported before \n","fig = plt.figure(figsize(15,10))\n","'''subplot grid parameters encoded as a single integer. For example, \"111\" means \"1x1 grid, first subplot\" and \"234\" means \"2x3 grid, 4th subplot\".'''\n","ax = fig.add_subplot(111)\n","ax = sns.heatmap(confusion_mtx, annot=True, fmt='d', ax=ax, cmap=\"Greens\")\n","ax.set_xlabel('Predicted Label')\n","ax.set_ylabel('True Label')\n","ax.set_title('Confusion Matrix');"],"metadata":{"id":"A4vDA81edoBg","executionInfo":{"status":"ok","timestamp":1650795946335,"user_tz":-180,"elapsed":1290,"user":{"displayName":"Waleed Zaghloul","userId":"01299016220189512847"}},"outputId":"0e33b535-0085-4311-8155-bf2778e9aff9","colab":{"base_uri":"https://localhost:8080/","height":621}},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x720 with 2 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#Investigate Errors"],"metadata":{"id":"IqWWngNNmxOe"}},{"cell_type":"code","source":["#this finds the values where the predicted classes are not the same as the two classes\n","errors = (y_pred_classes - y_true != 0)\n","#we make some variables where we keep all the error values\n","y_pred_classes_errors = y_pred_classes[errors]\n","y_pred_errors = y_pred[errors]\n","y_true_errors = y_true[errors]\n","x_test_errors = x_test[errors]"],"metadata":{"id":"_rAjHoOGgIft"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#find the errors with the maximum probability \n","#we will find those values where the algorithm is the least certain of the correct prediction\n","y_pred_errors_probability = np.max(y_pred_errors, axis=1)\n","true_probability_errors = np.diagonal(np.take(y_pred_errors, y_true_errors, axis=1))\n","diff_errors_pred_true = y_pred_errors_probability - true_probability_errors\n","\n","#get list of indices of sorted differences\n","sorted_idx_diff_errors = np.argsort(diff_errors_pred_true)\n","top_idx_diff_errors = sorted_idx_diff_errors[-5:] # picks the 5 last ones"],"metadata":{"id":"oFqTYcz9nl1g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from keras.metrics import top_k_categorical_accuracy\n","#show top errors\n","num = len(top_idx_diff_errors)\n","f, ax = plt.subplots(1, num)\n","f = plt.figure(figsize(20,5))\n","\n","for i in range(0, num):\n","  idx = top_idx_diff_errors[i]\n","  sample = x_test_errors[idx].reshape(28,28)\n","  y_t = y_true_errors[idx]\n","  y_p = y_pred_classes_errors[idx]\n","  ax[i].imshow(sample, cmap='gray')\n","  ax[i].set_title('Predicted Label: {}\\nTrue Label: {}'.format(y_p, y_t),fontsize=15)"],"metadata":{"id":"NhjiC4-6pXgs","executionInfo":{"status":"ok","timestamp":1650795954106,"user_tz":-180,"elapsed":928,"user":{"displayName":"Waleed Zaghloul","userId":"01299016220189512847"}},"outputId":"61edbb60-bee8-48cf-ca35-cee82eeb9042","colab":{"base_uri":"https://localhost:8080/","height":245}},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x720 with 5 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x360 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"PkaebBXkqmsF"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"collapsed_sections":[],"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1646594502264}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}